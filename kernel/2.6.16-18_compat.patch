diff --git a/iscsi_2.6.20_compat.h b/iscsi_2.6.20_compat.h
new file mode 100644
index 0000000..4128fdd
--- /dev/null
+++ b/iscsi_2.6.20_compat.h
@@ -0,0 +1,59 @@
+
+#define CRYPTO_ALG_ASYNC		0x00000080
+struct hash_desc
+{
+	struct crypto_tfm *tfm;
+	u32 flags;
+};
+
+static inline int crypto_hash_init(struct hash_desc *desc)
+{
+	crypto_digest_init(desc->tfm);
+	return 0;
+}
+
+static inline int crypto_hash_digest(struct hash_desc *desc,
+				     struct scatterlist *sg,
+				     unsigned int nbytes, u8 *out)
+{
+	crypto_digest_digest(desc->tfm, sg, 1, out);
+	return nbytes;
+}
+
+static inline int crypto_hash_update(struct hash_desc *desc,
+				     struct scatterlist *sg,
+				     unsigned int nbytes)
+{
+	crypto_digest_update(desc->tfm, sg, 1);
+	return nbytes;
+}
+
+static inline int crypto_hash_final(struct hash_desc *desc, u8 *out)
+{
+	crypto_digest_final(desc->tfm, out);
+	return 0;
+}
+
+static inline struct crypto_tfm *crypto_alloc_hash(const char *alg_name,
+						    u32 type, u32 mask)
+{
+	struct crypto_tfm *ret = crypto_alloc_tfm(alg_name ,type);
+	return ret ? ret : ERR_PTR(-ENOMEM);
+}
+
+static inline void crypto_free_hash(struct crypto_tfm *tfm)
+{
+	crypto_free_tfm(tfm);
+}
+
+int kernel_getsockname(struct socket *sock, struct sockaddr *addr,
+			int *addrlen)
+{
+	return sock->ops->getname(sock, addr, addrlen, 0);
+}
+
+int kernel_getpeername(struct socket *sock, struct sockaddr *addr,
+			int *addrlen)
+{
+	return sock->ops->getname(sock, addr, addrlen, 1);
+}
diff --git a/iscsi_2.6.22_compat.h b/iscsi_2.6.22_compat.h
new file mode 100644
index 0000000..6627292
--- /dev/null
+++ b/iscsi_2.6.22_compat.h
@@ -0,0 +1,6 @@
+#include <linux/version.h>
+
+#if LINUX_VERSION_CODE <= KERNEL_VERSION(2,6,21)
+#define netlink_kernel_create(uint, groups, input, cb_mutex, mod) \
+	netlink_kernel_create(uint, groups, input, mod)
+#endif
diff --git a/iscsi_tcp.h b/iscsi_tcp.h
index 4b86fe4..1b4336d 100644
--- a/iscsi_tcp.h
+++ b/iscsi_tcp.h
@@ -52,6 +52,8 @@
 #define ISCSI_SG_TABLESIZE		SG_ALL
 #define ISCSI_TCP_MAX_CMD_LEN		16
 
+#include "iscsi_2.6.20_compat.h"
+#include "iscsi_2.6.22_compat.h"
 struct crypto_hash;
 struct socket;
 
diff --git a/libiscsi.c b/libiscsi.c
index f2ef4c7..fd241ca 100644
--- a/libiscsi.c
+++ b/libiscsi.c
@@ -760,10 +760,9 @@ again:
 	return rc;
 }
 
-static void iscsi_xmitworker(struct work_struct *work)
+static void iscsi_xmitworker(void *data)
 {
-	struct iscsi_conn *conn =
-		container_of(work, struct iscsi_conn, xmitwork);
+	struct iscsi_conn *conn = data;
 	int rc;
 	/*
 	 * serialize Xmit worker on a per-connection basis.
@@ -1528,7 +1527,7 @@ iscsi_conn_setup(struct iscsi_cls_session *cls_session, uint32_t conn_idx)
 	if (conn->mgmtqueue == ERR_PTR(-ENOMEM))
 		goto mgmtqueue_alloc_fail;
 
-	INIT_WORK(&conn->xmitwork, iscsi_xmitworker);
+	INIT_WORK(&conn->xmitwork, iscsi_xmitworker, conn);
 
 	/* allocate login_mtask used for the login/text sequences */
 	spin_lock_bh(&session->lock);
diff --git a/libiscsi.h b/libiscsi.h
index 3ee0f4f..24fb7d5 100644
--- a/libiscsi.h
+++ b/libiscsi.h
@@ -25,8 +25,6 @@
 
 #include <linux/types.h>
 #include <linux/mutex.h>
-#include <linux/timer.h>
-#include <linux/workqueue.h>
 #include "iscsi_proto.h"
 #include "iscsi_if.h"
 
diff --git a/scsi_transport_iscsi.c b/scsi_transport_iscsi.c
index 5bca8a9..59e7ea9 100644
--- a/scsi_transport_iscsi.c
+++ b/scsi_transport_iscsi.c
@@ -29,6 +29,7 @@
 #include <scsi/scsi_transport.h>
 #include "scsi_transport_iscsi.h"
 #include "iscsi_if.h"
+#include "iscsi_2.6.22_compat.h"
 
 #define ISCSI_SESSION_ATTRS 15
 #define ISCSI_CONN_ATTRS 11
@@ -234,11 +235,9 @@ static int iscsi_user_scan(struct Scsi_Host *shost, uint channel,
 	return 0;
 }
 
-static void session_recovery_timedout(struct work_struct *work)
+static void session_recovery_timedout(void *data)
 {
-	struct iscsi_cls_session *session =
-		container_of(work, struct iscsi_cls_session,
-			     recovery_work.work);
+	struct iscsi_cls_session *session = data;
 
 	dev_printk(KERN_INFO, &session->dev, "iscsi: session recovery timed "
 		  "out after %d secs\n", session->recovery_tmo);
@@ -278,7 +277,7 @@ iscsi_alloc_session(struct Scsi_Host *shost,
 
 	session->transport = transport;
 	session->recovery_tmo = 120;
-	INIT_DELAYED_WORK(&session->recovery_work, session_recovery_timedout);
+	INIT_WORK(&session->recovery_work, session_recovery_timedout, session);
 	INIT_LIST_HEAD(&session->host_list);
 	INIT_LIST_HEAD(&session->sess_list);
 
diff --git a/scsi_transport_iscsi.h b/scsi_transport_iscsi.h
index 05e2554..562f63d 100644
--- a/scsi_transport_iscsi.h
+++ b/scsi_transport_iscsi.h
@@ -182,7 +182,7 @@ struct iscsi_cls_session {
 
 	/* recovery fields */
 	int recovery_tmo;
-	struct delayed_work recovery_work;
+	struct work_struct recovery_work;
 
 	int target_id;
 
-- 
1.5.1.2

